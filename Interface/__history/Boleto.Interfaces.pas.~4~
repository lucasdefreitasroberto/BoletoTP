unit Boleto.Interfaces;

interface

type
  ITitulo<T> = interface

  function Vencimento        := StrToDate(edtVencimento.Text);
  function DataDocumento     := StrToDate(edtDataDoc.Text);
  function NumeroDocumento   := edtNumeroDoc.Text;
  function EspecieDoc        := edtEspecieDoc.Text;
  function EspecieMod        := edtEspecieMod.Text;
  function Aceite := atNao;

  function DataProcessamento := Now;
  function Carteira          := edtCarteira.Text;
  function NossoNumero       := edtNossoNro.Text;
  function NossoNumeroCorrespondente := ''; //utilizado na Consulta, Alteração e Baixa da API Inter com QrCode
  function ValorDocumento    := StrToCurr(edtValorDoc.Text);
  function Sacado.NomeSacado := edtNome.Text;
  function Sacado.CNPJCPF    := OnlyNumber(edtCPFCNPJ.Text);
  function Sacado.Logradouro := edtEndereco.Text;
  function Sacado.Numero     := edtNumero.Text;
  function Sacado.Bairro     := edtBairro.Text;
  function Sacado.Cidade     := edtCidade.Text;
  function Sacado.UF         := edtUF.Text;
  function Sacado.CEP        := OnlyNumber(edtCEP.Text);
  function ValorAbatimento   := StrToCurrDef(edtValorAbatimento.Text,0);
  function LocalPagamento    := edtLocalPag.Text;
  function ValorMoraJuros    := StrToCurrDef(edtMoraJuros.Text,0);


  function ValorDesconto(Value: Currency): ITitulo<T>; overload;
  function ValorDesconto: Currency; overload;

  function ValorAbatimento(Value: Currency): ITitulo<T>; overload;
  function ValorAbatimento: Currency; overload;

  function DataMoraJuros(Value: TDateTime): ITitulo<T>; overload;
  function DataMoraJuros: TDateTime; overload;

  function DataDesconto(Value: TDateTime): ITitulo<T>; overload;
  function DataDesconto: TDateTime; overload;

  function TipoDesconto(Value: Interger): ITitulo<T>; overload;
  function TipoDesconto: Interger; overload;

  function DataAbatimento(Value: TDateTime): ITitulo<T>; overload;
  function DataAbatimento: TDateTime; overload;

  function DataProtesto(Value: TDateTime): ITitulo<T>; overload;
  function DataProtesto: TDateTime; overload;

  function PercentualMulta(Value: Double): ITitulo<T>; overload;
  function PercentualMulta: Double; overload;

  function CodigoMoraJuros(Value: Interger): ITitulo<T>; overload;
  function CodigoMoraJuros: Interger; overload;

  function Mensagem(Value: String): ITitulo<T>; overload;
  function Mensagem: String; overload;

  function OcorrenciaOriginal(Value: Interger): ITitulo<T>; overload;
  function OcorrenciaOriginal: Interger; overload;

  function Instrucao1(Value: String): ITitulo<T>; overload;
  function Instrucao1: String; overload;

  function Instrucao2(Value: String): ITitulo<T>; overload;
  function Instrucao2: String; overload;

  function QtdePagamentoParcial(Value: Interger): ITitulo<T>; overload;
  function QtdePagamentoParcial: Interger; overload;

  function TipoPagamento(Value: Interger): ITitulo<T>; overload;
  function TipoPagamento: Interger; overload;

  function PercentualMinPagamentoo(Value: Currency): ITitulo<T>; overload;
  function PercentualMinPagamentoo: Currency; overload;

  function PercentualMaxPagamento(Value: Currency): ITitulo<T>; overload;
  function PercentualMaxPagamento: Currency; overload;

  function ValorMinPagamento(Value: Currency): ITitulo<T>; overload;
  function ValorMinPagamento: Currency; overload;

  function ValorMaxPagamento(Value: Currency): ITitulo<T>; overload;
  function ValorMaxPagamento: Currency; overload;

  function Verso(Value: Boolean): ITitulo<T>; overload;
  function Verso: Boolean; overload;

  function &End: T;
  end;


  IBoelto = Interface
    function LerConfiguracao(value: string): IBoelto;
    function Titulo: ITitulo<IBoelto>;
    procedure GerarPDF;
  end;
implementation

end.
