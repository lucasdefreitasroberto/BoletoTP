unit Boleto.Classes;

interface

uses
  Boleto.Interfaces;

type
  TTitulo<T: IInterface> = class(TInterfacedObject, ITitulo<T>)
  private
    [weak]
    FParent: T;

    FVencimento: TDateTime;
    FDataDocumento: TDateTime;
    FNumeroDocumento: String;
    FEspecieDoc: String;
    FEspecieMod: String;
    FDataProcessamento: TDateTime;
    FCarteira: String;
    FNossoNumero: String;
    FNossoNumeroCorrespondente: String;
    FValorDocumento: Currency;
    FSacadoNomeSacado: String;
    FSacadoCNPJCPF: String;
    FSacadoLogradouro: String;
    FSacadoNumero: String;
    FSacadoBairro: String;
    FSacadoCidade: String;
    FSacadoUF: String;
    FSacadoCEP: String;
    FValorAbatimento: Currency;
    FLocalPagamento: String;
    FValorMoraJuros: Currency;
    FValorDesconto: Currency;
    FDataMoraJuros: TDateTime;
    FDataDesconto: TDateTime;
    FTipoDesconto: Integer;
    FDataAbatimento: TDateTime;
    FDataProtesto: TDateTime;
    FPercentualMulta: Double;
    FCodigoMoraJuros: Integer;
    FMensagem: String;
    FOcorrenciaOriginal: Integer;
    FInstrucao1: String;
    FInstrucao2: String;
    FQtdePagamentoParcial: Integer;
    FTipoPagamento: Integer;
    FPercentualMinPagamentoo: Currency;
    FPercentualMaxPagamento: Currency;
    FValorMinPagamento: Currency;
    FValorMaxPagamento: Currency;
    FVerso: Boolean;

    constructor Create(Parent: T);
    destructor Destroy; override;
  public
    class function New(Parent: T): ITitulo<T>;

    function Vencimento(Value: TDateTime): ITitulo<T>; overload;
    function Vencimento: TDateTime; overload;
    function DataDocumento(Value: TDateTime): ITitulo<T>; overload;
    function DataDocumento: TDateTime; overload;
    function NumeroDocumento(Value: string): ITitulo<T>; overload;
    function NumeroDocumento: string; overload;
    function EspecieDoc(Value: string): ITitulo<T>; overload;
    function EspecieDoc: string; overload;
    function EspecieMod(Value: string): ITitulo<T>; overload;
    function EspecieMod: string; overload;
    function DataProcessamento(Value: TDateTime): ITitulo<T>; overload;
    function DataProcessamento: TDateTime; overload;
    function Carteira(Value: string): ITitulo<T>; overload;
    function Carteira: string; overload;
    function NossoNumero(Value: string): ITitulo<T>; overload;
    function NossoNumero: string; overload;
    function NossoNumeroCorrespondente(Value: string): ITitulo<T>; overload;
    function NossoNumeroCorrespondente: string; overload;
    function ValorDocumento(Value: Currency): ITitulo<T>; overload;
    function ValorDocumento: Currency; overload;
    function SacadoNomeSacado(Value: string): ITitulo<T>; overload;
    function SacadoNomeSacado: string; overload;
    function SacadoCNPJCPF(Value: string): ITitulo<T>; overload;
    function SacadoCNPJCPF: string; overload;
    function SacadoLogradouro(Value: string): ITitulo<T>; overload;
    function SacadoLogradouro: string; overload;
    function SacadoNumero(Value: string): ITitulo<T>; overload;
    function SacadoNumero: string; overload;
    function SacadoBairro(Value: string): ITitulo<T>; overload;
    function SacadoBairro: string; overload;
    function SacadoCidade(Value: string): ITitulo<T>; overload;
    function SacadoCidade: string; overload;
    function SacadoUF(Value: string): ITitulo<T>; overload;
    function SacadoUF: string; overload;
    function SacadoCEP(Value: string): ITitulo<T>; overload;
    function SacadoCEP: string; overload;
    function ValorAbatimento(Value: Currency): ITitulo<T>; overload;
    function ValorAbatimento: Currency; overload;
    function LocalPagamento(Value: string): ITitulo<T>; overload;
    function LocalPagamento: string; overload;
    function ValorMoraJuros(Value: Currency): ITitulo<T>; overload;
    function ValorMoraJuros: Currency; overload;
    function ValorDesconto(Value: Currency): ITitulo<T>; overload;
    function ValorDesconto: Currency; overload;
    function DataMoraJuros(Value: TDateTime): ITitulo<T>; overload;
    function DataMoraJuros: TDateTime; overload;
    function DataDesconto(Value: TDateTime): ITitulo<T>; overload;
    function DataDesconto: TDateTime; overload;
    function TipoDesconto(Value: Integer): ITitulo<T>; overload;
    function TipoDesconto: Integer; overload;
    function DataAbatimento(Value: TDateTime): ITitulo<T>; overload;
    function DataAbatimento: TDateTime; overload;
    function DataProtesto(Value: TDateTime): ITitulo<T>; overload;
    function DataProtesto: TDateTime; overload;
    function PercentualMulta(Value: Double): ITitulo<T>; overload;
    function PercentualMulta: Double; overload;
    function CodigoMoraJuros(Value: Integer): ITitulo<T>; overload;
    function CodigoMoraJuros: Integer; overload;
    function Mensagem(Value: string): ITitulo<T>; overload;
    function Mensagem: string; overload;
    function OcorrenciaOriginal(Value: Integer): ITitulo<T>; overload;
    function OcorrenciaOriginal: Integer; overload;
    function Instrucao1(Value: string): ITitulo<T>; overload;
    function Instrucao1: string; overload;
    function Instrucao2(Value: string): ITitulo<T>; overload;
    function Instrucao2: string; overload;
    function QtdePagamentoParcial(Value: Integer): ITitulo<T>; overload;
    function QtdePagamentoParcial: Integer; overload;
    function TipoPagamento(Value: Integer): ITitulo<T>; overload;
    function TipoPagamento: Integer; overload;
    function PercentualMinPagamentoo(Value: Currency): ITitulo<T>; overload;
    function PercentualMinPagamentoo: Currency; overload;
    function PercentualMaxPagamento(Value: Currency): ITitulo<T>; overload;
    function PercentualMaxPagamento: Currency; overload;
    function ValorMinPagamento(Value: Currency): ITitulo<T>; overload;
    function ValorMinPagamento: Currency; overload;
    function ValorMaxPagamento(Value: Currency): ITitulo<T>; overload;
    function ValorMaxPagamento: Currency; overload;
    function Verso(Value: Boolean): ITitulo<T>; overload;
    function Verso: Boolean; overload;

    function &End: T;
  end;

implementation

end.
